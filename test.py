import streamlit as st
import pandas as pd
import plotly.graph_objects as go

# Load DataFrame from CSV
df = pd.read_csv('tabular_data/vulnerability_index.csv')

# Ensure the 'COUNTRY' column is present
if 'COUNTRY' not in df.columns:
    st.error("The CSV file must contain a 'COUNTRY' column.")
    st.stop()

# Extract variable columns (excluding 'COUNTRY')
var_columns = [col for col in df.columns if col != 'COUNTRY']

# Define variables that should be excluded
exclude_vars = {'VULNERABILITY', 'VULNERABILITY_DELTA'}

# Filter out excluded variables
filtered_var_columns = [var for var in var_columns if var not in exclude_vars]

st.title('Interactive Scatterplot Dashboard')

# Dropdown for selecting country
selected_country = st.selectbox('Select a country', df['COUNTRY'])

# Dropdowns for selecting variables
var_x = st.selectbox('Select variable for X-axis', filtered_var_columns, key='x')
# Ensure Y-axis options are updated based on X-axis selection
available_var_y = [var for var in filtered_var_columns if var != var_x]
var_y = st.selectbox('Select variable for Y-axis', available_var_y, key='y')

# Check if selected country has data for both variables
selected_data = df[df['COUNTRY'] == selected_country]

# Initialize lists to track missing and available data
missing_vars = []
available_vars = []

for var in filtered_var_columns:
    if pd.isna(selected_data[var].values[0]):
        missing_vars.append(var)
    else:
        available_vars.append(var)

# Construct error message
if pd.isna(selected_data[var_x].values[0]) or pd.isna(selected_data[var_y].values[0]):
    missing_vars_for_selection = [var_x, var_y] if pd.isna(selected_data[var_x].values[0]) or pd.isna(selected_data[var_y].values[0]) else []
    if missing_vars_for_selection:
        missing_vars_str = ', '.join(missing_vars_for_selection)
        available_vars_str = ', '.join(available_vars)
        error_message = (f"The selected country does not have data for the following selected variable(s): {missing_vars_str}. "
                         f"Available variable(s) are: {available_vars_str}.")
        st.error(error_message)
        st.stop()

# Calculate distances and find the closest 10 countries
df['Distance'] = ((df[var_x] - selected_data[var_x].values[0]) ** 2 + (df[var_y] - selected_data[var_y].values[0]) ** 2) ** 0.5
closest_countries = df.nsmallest(11, 'Distance')  # Include the selected country itself
closest_countries = closest_countries[closest_countries['COUNTRY'] != selected_country]

# Ensure the selected country is included in the scatterplot
selected_country_data = df[df['COUNTRY'] == selected_country]
closest_countries = pd.concat([closest_countries, selected_country_data])

# Create scatterplot
fig = go.Figure()

# Add trace for closest countries
fig.add_trace(go.Scatter(
    x=closest_countries[closest_countries['COUNTRY'] != selected_country][var_x],
    y=closest_countries[closest_countries['COUNTRY'] != selected_country][var_y],
    mode='markers+text',
    text=closest_countries[closest_countries['COUNTRY'] != selected_country]['COUNTRY'],
    textposition='top center',
    marker=dict(size=10, color='rgba(0, 0, 255, 0.8)'),
    textfont=dict(size=14, color='rgba(0, 0, 0, 0.8)'),
    name='Closest Countries'
))

# Add trace for selected country
fig.add_trace(go.Scatter(
    x=selected_country_data[var_x],
    y=selected_country_data[var_y],
    mode='markers+text',
    text=selected_country_data['COUNTRY'],
    textposition='top center',
    marker=dict(size=12, color='rgba(255, 0, 0, 0.8)'),
    textfont=dict(size=16, color='rgba(255, 0, 0, 0.8)'),
    name='Selected Country'
))

# Update layout for better visualization if necessary
fig.update_layout(
    title=f'Scatterplot of the 10 most similar countries in {var_x} vs {var_y}',
    xaxis_title=var_x,
    yaxis_title=var_y,
    xaxis_type='log' if var_x == 'log' else 'linear',
    yaxis_type='log' if var_y == 'log' else 'linear'
)

st.plotly_chart(fig)
