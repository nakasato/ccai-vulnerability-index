import streamlit as st

import os
import pandas as pd
from dotenv import load_dotenv, find_dotenv
import openai
from langchain.chat_models import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
import plotly.express as px


load_dotenv(find_dotenv())
openai.api_key = os.environ['OPENAI_KEY']

st.set_page_config(layout='wide')

col1, col2 = st.columns(spec=[0.1, 0.9], gap='small')
with col1:
    st.image('webapp/imgs/logo.png', width=160)

with col2:
    st.title('CCAI - Climate Vulnerability Index')
    st.markdown('''
                Welcome to our Climate Vulnerability Web App, a powerful tool designed 
                to help countries assess their climate risks and take meaningful action. 
                Leveraging a comprehensive Climate Vulnerability Index, our platform 
                provides a detailed analysis of the primary climate challenges each 
                country faces. By understanding these vulnerabilities, we offer 
                actionable recommendations that can help governments, organizations, 
                and communities minimize their exposure to climate-related disasters and 
                build resilience for the future.
                ''')
    st.caption('AI models can hallucinate. Always verify important information.')


df = pd.read_csv('tabular_data/vulnerability_index.csv')
df.columns = [col.capitalize() for col in df.columns]

col1, col2 = st.columns(spec=[0.4, 0.6], gap='medium')
with col1:
    slc_country = st.selectbox('Select the country:', df['Country'].unique(), placeholder='Country')

    country_data = df[df['Country'] == slc_country].drop(['Country', 'Vulnerability', 'Vulnerability_delta'], axis=1)
    fig = px.line_polar(country_data.melt(var_name='Category', value_name='Value'), 
                        r='Value', theta='Category', line_close=True)
    fig.update_traces(fill='toself')
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 1]
            )
        )
    )
    st.plotly_chart(fig)

with col2:
    with st.spinner('Generating recommendations...'):
        LLM_NAME = 'gpt-4o-mini'
        prompt = ChatPromptTemplate.from_messages([
            ('system', 'You are an environmentalist specializing in recommending climate adaptation policies for countries that want to minimize their exposure to disaster risks.'),
            ('user', '{input}')
        ])
        llm = ChatOpenAI(openai_api_key=openai.api_key, model_name=LLM_NAME, temperature=0.3)
        chain = prompt | llm
        user_prompt = f"""Summarize the main climate vulnerabilities to which the following country is exposed and provide actionable recommendations to minimize them.
        Split the answer into two sections: one for the summary of the 'Main Climate Vulnerabilities' and another called 'Actionable Recommendations' for the recommendations.
        Country: {slc_country}
        """
        summary = chain.invoke({'input': user_prompt})
        st.write(summary.content)