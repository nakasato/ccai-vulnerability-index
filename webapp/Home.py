import streamlit as st

import os
import pandas as pd
from dotenv import load_dotenv, find_dotenv
import openai
from langchain.chat_models import ChatOpenAI # remove
from langchain_core.prompts import ChatPromptTemplate # remove
import plotly.express as px

from langchain.embeddings.openai import OpenAIEmbeddings
from langchain_pinecone import PineconeVectorStore
from langchain.chains import RetrievalQAWithSourcesChain 

load_dotenv(find_dotenv())
openai.api_key = os.environ['OPENAI_KEY']
pinecone_api_key = os.environ.get('PINECONE_KEY')

LLM_NAME = 'gpt-4o-mini'
TEMP = 0.0
INDEX_NAME = 'ccai-kb'
EMBEDDING_NAME = 'text-embedding-3-small'
K_DOCS = 5
SUBINDICES_MAP = {
    'vulnerability_factors': ['capacity', 'exposure', 'sensitivity'],
    'water': ['id_wate_01', 'id_wate_02', 'id_wate_03', 'id_wate_04', 'id_wate_05', 'id_wate_06'],
    'food': ['id_food_01', 'id_food_02', 'id_food_03', 'id_food_04', 'id_food_05', 'id_food_06'],
    'health': ['id_heal_01', 'id_heal_02', 'id_heal_03', 'id_heal_04', 'id_heal_05', 'id_heal_06'], 
    'ecosystems': ['id_ecos_01', 'id_ecos_02', 'id_ecos_03', 'id_ecos_04', 'id_ecos_05', 'id_ecos_06'],
    'habitat': ['id_habi_01', 'id_habi_02', 'id_habi_03', 'id_habi_04', 'id_habi_05', 'id_habi_06'], 
    'infrastructure': ['id_infr_01', 'id_infr_02', 'id_infr_03', 'id_infr_04', 'id_infr_05', 'id_infr_06'], 
}
COLOR_SCHEMES = {
    'scheme_1': {
        'line_color': 'blue',
        'fillcolor': 'rgba(0, 0, 255, 0.3)'
    },
    'scheme_2': {
        'line_color': 'red',
        'fillcolor': 'rgba(255, 0, 0, 0.3)'
    },
    'scheme_3': {
        'line_color': 'green',
        'fillcolor': 'rgba(0, 255, 0, 0.3)'
    },
    'scheme_4': {
        'line_color': 'orange',
        'fillcolor': 'rgba(255, 165, 0, 0.3)'
    },
    'scheme_5': {
        'line_color': 'purple',
        'fillcolor': 'rgba(128, 0, 128, 0.3)'
    },
    'scheme_6': {
        'line_color': 'teal',
        'fillcolor': 'rgba(0, 128, 128, 0.3)'
    },
    'scheme_7': {
        'line_color': 'gold',
        'fillcolor': 'rgba(255, 215, 0, 0.3)'
    }
}

embedding = OpenAIEmbeddings(openai_api_key=openai.api_key, model=EMBEDDING_NAME)
index = PineconeVectorStore.get_pinecone_index(pinecone_api_key=pinecone_api_key, index_name=INDEX_NAME)
vectordb = PineconeVectorStore(pinecone_api_key=pinecone_api_key, index_name=INDEX_NAME, embedding=embedding)
llm = ChatOpenAI(openai_api_key=openai.api_key, model_name=LLM_NAME, temperature=0.0)
retriever = vectordb.as_retriever(search_kwargs={'k': K_DOCS})

qa_with_sources = RetrievalQAWithSourcesChain.from_chain_type(  
    llm=llm,  
    chain_type="stuff",  
    retriever=retriever 
)

def format_sources(matched_docs):
    matched_docs = matched_docs.split(', ')
    sources = [doc.split('.')[0] for doc in set(matched_docs)]
    sources_formatted = '\n'.join([f"- {filename.replace('_', ' ')}" for filename in sources])
    return f"**Sources:**\n{sources_formatted}"


def generate_radar_plot(df, 
                        country,
                        cols, 
                        line_color='blue', 
                        fillcolor='rgba(0, 128, 128, 0.3)', 
                        width=600, 
                        ploted_font_size=15,
                        tickfont_size=17, 
                        title='Radar Plot'):
    """
    Function to generate a radar plot for a given country with increased font size,
    displaying values on the radar map, and including a custom title.
    """
    
    # Filter the data for the selected country
    country_data = df[df['country'] == country][cols]
    
    # Melt the data for radar plot
    melted_data = country_data.melt(var_name='Category', value_name='Value')
    
    # Create radar plot
    fig = px.line_polar(melted_data, r='Value', theta='Category', line_close=True)
    
    # Update traces with color and show text (values) on radar points
    fig.update_traces(fill='toself', line_color=line_color, fillcolor=fillcolor, 
                      mode='markers+text', text=melted_data['Value'].round(2), 
                      textposition='top center')
    
    # Update layout with increased font size, custom dimensions, and title
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 1],
                tickfont=dict(size=14),  # Increase font size for the axis
            ),
            angularaxis=dict(
                tickfont=dict(size=tickfont_size)  # Increase font size for category labels
            )
        ),
        width=width,
        height=width,
        font=dict(size=ploted_font_size),  # Increase general font size
        title=dict(text=title, x=0.0, xanchor='left', font=dict(size=20, color=line_color)),  # Set custom title
        margin=dict(t=120, b=0, l=0, r=0)  # Add padding for the title, adjust as needed
    )
    
    # Display the radar plot in Streamlit
    st.plotly_chart(fig)


st.set_page_config(layout='wide')

col1, col2 = st.columns(spec=[0.1, 0.9], gap='small')
with col1:
    st.image('webapp/imgs/logo.png', width=160)

with col2:
    st.title('CCAI - Climate Vulnerability Index')
    st.markdown('''
                Welcome to our Climate Vulnerability Web App, a powerful tool designed 
                to help countries assess their climate risks and take meaningful action. 
                Leveraging a comprehensive Climate Vulnerability Index, our platform 
                provides a detailed analysis of the primary climate challenges each 
                country faces. By understanding these vulnerabilities, we offer 
                actionable recommendations that can help governments, organizations, 
                and communities minimize their exposure to climate-related disasters and 
                build resilience for the future.
                ''')
    st.caption('AI models can hallucinate. Always verify important information.')


df = pd.read_csv('tabular_data/all_indicators.csv')
df.columns = [col.lower() for col in df.columns]

slc_country = st.selectbox('Select the country:', df['country'].unique(), placeholder='country')

st.header(f'{slc_country}: Main Climate Vulnerabilities Today')
st.write('Analysis based on capacity, exposure, and sensitivity to climate change (ref ND-Gains).')

# query = """You are an environmentalist specializing in recommending climate adaptation policies for countries that want to minimize their exposure to disaster risks.

# Summarize the main climate vulnerabilities to which the following country is exposed and provide actionable recommendations to minimize them.
# Split the answer into two sections: one for the summary of the 'Main Climate Vulnerabilities' and another called 'Actionable Recommendations' for the recommendations.

# Country: {slc_country}"""

# output = qa_with_sources(query.format(slc_country=slc_country))


col1, col2, col3, col4 = st.columns(spec=[0.4, 0.2, 0.2, 0.2], gap='medium')
with col1:
    generate_radar_plot(df, 
                        slc_country, 
                        cols=SUBINDICES_MAP['vulnerability_factors'], 
                        line_color=COLOR_SCHEMES['scheme_1']['line_color'], 
                        fillcolor=COLOR_SCHEMES['scheme_1']['fillcolor'], 
                        width=550, 
                        tickfont_size=17,
                        title='Main Vulnerabilities Indices')
    del SUBINDICES_MAP['vulnerability_factors']
    del COLOR_SCHEMES['scheme_1']

with col2:
    generate_radar_plot(df, 
                        slc_country, 
                        cols=SUBINDICES_MAP['water'], 
                        line_color=COLOR_SCHEMES[f'scheme_2']['line_color'], 
                        fillcolor=COLOR_SCHEMES[f'scheme_2']['fillcolor'], 
                        width=350,
                        ploted_font_size=14,
                        tickfont_size=13,
                        title='Water Subindices')

    generate_radar_plot(df, 
                        slc_country, 
                        cols=SUBINDICES_MAP['food'], 
                        line_color=COLOR_SCHEMES[f'scheme_3']['line_color'], 
                        fillcolor=COLOR_SCHEMES[f'scheme_3']['fillcolor'], 
                        width=350,
                        ploted_font_size=14,
                        tickfont_size=13,
                        title='Food Subindices')

with col3:
    generate_radar_plot(df, 
                        slc_country, 
                        cols=SUBINDICES_MAP['health'], 
                        line_color=COLOR_SCHEMES[f'scheme_4']['line_color'], 
                        fillcolor=COLOR_SCHEMES[f'scheme_4']['fillcolor'], 
                        width=350,
                        ploted_font_size=14,
                        tickfont_size=13,
                        title='Health Subindices')

    generate_radar_plot(df, 
                        slc_country, 
                        cols=SUBINDICES_MAP['ecosystems'], 
                        line_color=COLOR_SCHEMES[f'scheme_5']['line_color'], 
                        fillcolor=COLOR_SCHEMES[f'scheme_5']['fillcolor'], 
                        width=350,
                        ploted_font_size=14,
                        tickfont_size=13,
                        title='Ecosystems Subindices')

with col4:
    generate_radar_plot(df, 
                        slc_country, 
                        cols=SUBINDICES_MAP['habitat'], 
                        line_color=COLOR_SCHEMES[f'scheme_6']['line_color'], 
                        fillcolor=COLOR_SCHEMES[f'scheme_6']['fillcolor'], 
                        width=350,
                        ploted_font_size=14,
                        tickfont_size=13,
                        title='Habitat Subindices')

    generate_radar_plot(df, 
                        slc_country, 
                        cols=SUBINDICES_MAP['infrastructure'], 
                        line_color=COLOR_SCHEMES[f'scheme_7']['line_color'], 
                        fillcolor=COLOR_SCHEMES[f'scheme_7']['fillcolor'], 
                        width=350,
                        ploted_font_size=14,
                        tickfont_size=13,
                        title='Infrastructure Subindices')


st.header(f'Some strategies for {slc_country} to start preparing for the future')
st.caption('Breakdown per indicator')
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([k.replace('_', ' ').capitalize() for k in SUBINDICES_MAP.keys()])

with tab1:
    with st.spinner('Generating recommendations...'):
        col1, col2 = st.columns(spec=[1, 1], gap='medium')
        with col1:
            st.error('Current situation', icon="ℹ️")


        with col2:
            st.success('Recommendations', icon="⚠️")
#         query = """You are an environmentalist specializing in recommending climate adaptation policies for countries that want to minimize their exposure to disaster risks.

# Summarize the main climate vulnerabilities to which the following country is exposed and provide actionable recommendations to minimize them.
# Split the answer into two sections: one for the summary of the 'Main Climate Vulnerabilities' and another called 'Actionable Recommendations' for the recommendations.

# Country: {slc_country}"""

#         output = qa_with_sources(query.format(slc_country=slc_country))

#         st.write(output['answer'])
#         st.write('---')
#         st.write(format_sources(output['sources']))
        
