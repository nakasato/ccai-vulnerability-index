import streamlit as st

import os
import pandas as pd
from dotenv import load_dotenv, find_dotenv
# import openai
# from langchain.chat_models import ChatOpenAI
# from langchain_core.prompts import ChatPromptTemplate
import plotly.express as px


load_dotenv(find_dotenv())
# openai.api_key = os.environ['OPENAI_KEY']

st.set_page_config(layout='wide')

col1, col2 = st.columns(spec=[0.15, 0.85], gap='small')
with col1:
    st.image('webapp/imgs/logo.png', width=160)

with col2:
    st.title('CCAI - Climate Vulnerability Index')
    st.markdown("Welcome to the (__tool name__), a tool designed to convert complex climate vulnerability data from the Notre Dame Global Adaptation Index (ND-GAIN) into clear, practical policy pathways. Instead of sifting through indexes or searching for papers, our platform provides a straightforward guide that helps policymakers navigate climate risks and develop informed strategies for their regions.")
    st.caption('AI models can hallucinate. Always verify important information.')

st.link_button("Submit your feedback here", "https://docs.google.com/forms/d/e/1FAIpQLScACr7FqGAepFPMF29oBRRaH0mc829AGdmDJC4tfSZ6BAeK3Q/viewform?usp=sf_link")

st.subheader("A bit about this tool")
st.markdown("The (tool name) is designed to make complex climate vulnerability data more accessible and easy to understand. By translating the detailed analyses from ND-GAIN into clear policy pathways, our platform helps policymakers craft informed strategies that address the unique climate vulnerability challenges of their regions. This tool serves as a crucial bridge between scientific research and practical decision-making, ensuring that the complexities of climate science are effectively communicated in a way that leads to straightforward policy pathways.")
st.markdown("***Explore your regionâ€™s climate vulnerabilities and discover tailored policy pathways with our translation tool.***")

df = pd.read_csv('tabular_data/vulnerability_index.csv')
df.columns = [col.capitalize() for col in df.columns]

col1, col2 = st.columns(spec=[0.4, 0.6], gap='medium')
with col1:
    st.header("Country vulnerability categories")
    slc_country = st.selectbox('Select the country:', df['Country'].unique(), placeholder='Country')

    country_data = df[df['Country'] == slc_country].drop(['Country', 'Vulnerability', 'Vulnerability_delta'], axis=1)
    fig = px.line_polar(country_data.melt(var_name='Category', value_name='Value'), 
                        r='Value', theta='Category', line_close=True)
    fig.update_traces(fill='toself')
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 1]
            )
        )
    )
    st.plotly_chart(fig)

with col2:
    st.header("Potential policy pathways")
    st.write("***These are recommended based on this country's vulnerability scores and the IPCC 6th Assessment Report.***")
    """
    with st.spinner('Generating recommendations...'):
        LLM_NAME = 'gpt-4o-mini'
        prompt = ChatPromptTemplate.from_messages([
            ('system', 'You are an environmentalist specializing in recommending climate adaptation policies for countries that want to minimize their exposure to disaster risks.'),
            ('user', '{input}')
        ])
        llm = ChatOpenAI(openai_api_key=openai.api_key, model_name=LLM_NAME, temperature=0.3)
        chain = prompt | llm
        user_prompt = fSummarize the main climate vulnerabilities to which the following country is exposed and provide actionable recommendations to minimize them.
        Split the answer into two sections: one for the summary of the 'Main Climate Vulnerabilities' and another called 'Actionable Recommendations' for the recommendations.
        Country: {slc_country}
        
        summary = chain.invoke({'input': user_prompt})
        st.write(summary.content)
    """


expander = st.expander("See indicators")
expander.write('''Dataset sourced from [ND-GAIN](https://gain.nd.edu/our-work/country-index/).''')
dictionary = pd.read_csv("tabular_data/Indicator_list.csv")
expander.table(dictionary)